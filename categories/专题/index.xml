<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>专题 on 三口一个瓜的博客</title>
    <link>https://bitnut.github.io/categories/%E4%B8%93%E9%A2%98/</link>
    <description>Recent content in 专题 on 三口一个瓜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 May 2021 13:00:28 +0800</lastBuildDate><atom:link href="https://bitnut.github.io/categories/%E4%B8%93%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Awk 入门（02）</title>
      <link>https://bitnut.github.io/posts/linux-awk2/</link>
      <pubDate>Wed, 12 May 2021 13:00:28 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-awk2/</guid>
      <description>前言 根据上文，我们了解到了 awk 的基本特性和书写方式。这一章，我们开始深入 awk 编程。 仔细思考 awk 的核心思路我们可以发现，我们在 awk 中聚焦的核心是 记录 以及 处理记录，而针对记录，如果我们可以筛选出我们需要的记录，那么无论是程序的执行次数还是编程复杂度都会大大降低。 那么，如何使用 awk 筛选出合适的记录呢？ 一、 基础语法 首</description>
    </item>
    
    <item>
      <title>Linux Awk 入门（01）</title>
      <link>https://bitnut.github.io/posts/linux-awk/</link>
      <pubDate>Wed, 21 Apr 2021 12:00:28 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-awk/</guid>
      <description>快速入门 awk 一、 awk 的作用、优势和特点 awk 最基础的功能是用作搜索 文件、命令行输出中特定的文本。然后对找到的文本执行指定的操作。 它最大的优势是，它是 linux 等 类 unix 系统下通用的工具，无需额外安装运行时和相关依赖即可使用。而且它 “好读”，“好写” : P。 awk is： refreshingly easy to read and write &amp;ndash; GNU awk get started awk 和其他编程语言的主要区别是，它是数</description>
    </item>
    
    <item>
      <title>Socks5 协议详解（经典设计）</title>
      <link>https://bitnut.github.io/posts/socks5-protocal/</link>
      <pubDate>Mon, 12 Apr 2021 22:13:37 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/socks5-protocal/</guid>
      <description>简介 socks5 是一个简单的代理协议，它的全称是 SOCKS Protocol Version 5 顾名思义就是第五代的 socks 协议。 socks5 的前身是 socks4, 作为新一代的协议，socks5 肯定是做出了一定的改进，具体是哪些，接下来都会慢慢了解到。 socks5 的正式发布时间是 1996 年 3 月，实际上是非常年长的协议（和我同岁）。它的出现并非是因为对抗众所周知的一些不可抗力，但也是有部分联系</description>
    </item>
    
    <item>
      <title>Linux 下 ‘奇怪’ 的 shell</title>
      <link>https://bitnut.github.io/posts/linux-strange-shell/</link>
      <pubDate>Fri, 26 Mar 2021 13:29:14 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-strange-shell/</guid>
      <description>前言 请原谅我的标题党，这篇文章主要聚焦的是 linux shell 中的引号问题。 如果你正在和 shell 打交道，那么了解 shell 中关于引号的问题是一件很有必要的事情。 下面的这些规则适用的对象是 POSIX 兼容的 shell 例如我们常用的 bash（GNU Bourne-Again Shell）。 注： 注意我的措辞，单独的引号的意思是既可以是单引号也可以是双引号。单引号和双引号就是本来</description>
    </item>
    
    <item>
      <title>Linux 中的软链接和硬链接</title>
      <link>https://bitnut.github.io/posts/linux-link/</link>
      <pubDate>Sun, 21 Mar 2021 17:10:40 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-link/</guid>
      <description>Linux 中的软链接和硬链接 前言 在 linux 中，硬链接（hard link）和软链接（symbolic link）是两个非常重要的概念，以前上课的时候听老师讲过这两个概念结果后来给忘了。这篇文章将通过实例，加深我们对这两个概念的印象。 了解 inode 在理解软/硬链接之前，我们必需了解一下， linux 里面 存储文件 的方式。 对于 linux 有一定了解的</description>
    </item>
    
    <item>
      <title>Linux 下的 ps 命令和常用组合</title>
      <link>https://bitnut.github.io/posts/linux-ps/</link>
      <pubDate>Fri, 19 Feb 2021 21:53:55 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-ps/</guid>
      <description>前言 总结整理一下简单、常用的 ps 命令用法。 一、查看进程 命令： ps 命令解释： 全称是 process status ，使用它相当于在 win 下的 任务管理器。 常用命令参数： -a 显示同一终端下的所有程序 -e 等于“-A” -e 显示环境变量 -f 显示程序间的关系 -r 显示当前终端的进程 -u 指定用户的所有进程 常用命令组合： -au 显示较详细的资讯 -aux 显示所有包含其他使用者的行</description>
    </item>
    
    <item>
      <title>认识 Linux 下的 TTY</title>
      <link>https://bitnut.github.io/posts/linux-tty/</link>
      <pubDate>Thu, 18 Feb 2021 16:34:47 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/linux-tty/</guid>
      <description>linux 下的 tty/pty/pts/ptmx (linux 概念系列) tty 是什么？ 在类 unix 系统中， tty 可以被看作是一个命令，但在更常见的情形下， tty 被认为是终端的代称。 tty 在作为命令的情形 随便打开几个终端看看，可以看到下图： 可以看到，输出的结果是一段地址，紧接着， cd 到这个地址下查看： 在 /dev/pts 这个地址下，有几个文件，分别是： 0 / 1 / 2 / 3 / ptmx 几个文件是啥意思？ 在 Linux</description>
    </item>
    
    <item>
      <title>CryptDB  简单原理论述</title>
      <link>https://bitnut.github.io/posts/cryptdb1/</link>
      <pubDate>Mon, 11 Sep 2017 08:52:53 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/cryptdb1/</guid>
      <description>博主写的 CryptDB 另外几篇相关文章： cryptdb 安装及使用说明 详细论述 CryptDB 的原理 1.面对threat 1 解决方案：通过把对数据库进行的操作（选择，连接，投影等操作）进行特殊处理，使得这些操作能够执行在已加密的数据上 这种解决方案存在的一大问题就是，目前还没有研究出一种加密方式，使得任何执行在数据库上的操作，都能正确运行在加</description>
    </item>
    
    <item>
      <title>详细论述 CryptDB 的原理</title>
      <link>https://bitnut.github.io/posts/cryptdb2/</link>
      <pubDate>Mon, 11 Sep 2017 08:52:18 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/cryptdb2/</guid>
      <description>版权声明：本文为博主原创文章，欢迎转载；转载请注明来自 瓜哥 博主写的 CryptDB 另外几篇相关文章： cryptdb 安装及使用说明 CryptDB 简单原理论述 相关资料 想要理解CryptDB, 你可能需要阅读如下资料： CryptDB. Popa, R. A., et al. (2011). CryptDB: protecting confidentiality with encrypted query processing. 文章链接 Guidelines for Using the CryptDB System Securely 链接 其他可能有用的资源: CryptDB 有软件的下载和使用介绍。 GitHub - CryptDB/cryptdb: A database system that can process SQL queries over encrypted data.</description>
    </item>
    
    <item>
      <title>cryptdb 安装及使用说明</title>
      <link>https://bitnut.github.io/posts/cryptdb-install/</link>
      <pubDate>Mon, 07 Aug 2017 20:44:51 +0800</pubDate>
      
      <guid>https://bitnut.github.io/posts/cryptdb-install/</guid>
      <description>版权声明：本文为博主原创文章，欢迎转载；转载请注明来自 瓜哥：D 博主写的 CryptDB 另外几篇相关文章： CryptDB 简单原理论述 详细论述 CryptDB 的原理 这个暑假的数据库实训内容，研究的项目背景下面会介绍～ 背景资料 Popa, R.A 在 MIT 攻读博士时发明了 CryptDB; 后来这个数据库方案迅速被微软和谷歌等知名企业采用和学习; 作者毕业后自己创立了公司PreVeil</description>
    </item>
    
  </channel>
</rss>
